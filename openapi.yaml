openapi: 3.0.0
info:
  version: 0.3.3
  title: WWI16AMA - Spec
  license:
    name: APL 2
servers:
  - url: 'http://wwi16ama.feste-ip.net/backend_api/'
paths:
  /members:
    $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/members.yaml#/~1members'
  '/members/{id}':
    $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/members.yaml#/~1members~1%7Bid%7D'
  /planes:
    $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/planes.yaml#/~1planes'
  '/planes/{id}': 
    $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/planes.yaml#/~1planes~1%7Bid%7D'
  /fees:
    get:
      summary: List of fees
      tags:
        - Fees
      responses:
        '200':
          description: An array of fees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fee'
  /accounts:
    get:
      summary: Paginated list of accounts without transactions.
      tags:
        - Accounts
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
        - name: start
          in: query
          description: How many items to skip
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: orderBy
          in: query
          description: The field by which the result is to be sorted
          required: false
          schema:
            type: string
            default: lastName
        - name: direction
          in: query
          description: the sorting direction
          required: false
          schema:
            type: string
            enum: ["asc", "desc"]
            default: "asc"
      responses:
        '200':
          description: A paged array of Accounts
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/ListAccount'
        '400':
          description: This error is thrown when the parameters are faulty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/accounts/{id}':
    get:
      summary: Info for a specific account with his transactions
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the member to retrieve
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404':
          description: Response when no account found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/accounts/{id}/transactions':
    post:
      summary: Add transactions to an account
      tags:
        - Accounts / Transactions
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the related account
          schema:
            type: integer
            format: int32
      requestBody:
        description: Transactions to add to the account
        required: true
        content:
          application/json:
            schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewTransaction'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Response when request is wrong, i.e. if required fields are empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Response when no member found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Member:
      $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/members.yaml#/components/schemas/Member'
    NewMember:
      $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/members.yaml#/components/schemas/NewMember'
    ListMember:
      $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/members.yaml#/components/schemas/ListMember'
    Address:
      $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/members.yaml#/components/schemas/Address'
    Error:
      required:
        - url
        - message
      properties:
        url:
          type: string
        message:
          type: string
    NewPlane:
      $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/planes.yaml#/components/schemas/NewPlane'      
    Plane:
      $ref: 'https://raw.githubusercontent.com/wwi16ama/api_spec/master/planes.yaml#/components/schemas/Plane'
    Fee:
      required:
        - category
        - fee
      properties:
        category:
          type: string
          enum: [ACTIVE, U20ACTIVE, PASSIVE, HONORARYMEMBER]
        fee:
          type: integer
          format: int32
    ListAccount:
      properties:
        id:
          type: integer
          format: int32
        balance:
          type: number
          format: double
    Account:
        allOf:
        - properties:
            transactions:
              type: array
              items:
                $ref: '#/components/schemas/Transaction'
        - $ref: '#/components/schemas/ListAccount'
    NewTransaction:
      required:
        - amount
        - type
      properties:
        amount:
          type: number  
          format: double
        type:
          type: string
          enum: ["GEBÜHR", "AUFWANDSENTSCHÄDIGUNG", "ZAHLUNG"]
    Transaction:
      allOf:
        - properties:
            id:
              type: integer
              format: int64
            timestamp:
              type: string
              format: date-time
        - $ref: '#/components/schemas/NewTransaction'
